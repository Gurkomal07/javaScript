import {useEffect, useState, Fragment} from 'react'

import Head from 'next/head'

import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import Divider from '@mui/material/Divider';
import Grid from '@mui/material/Grid';

import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';

import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';

import Typography from '@mui/material/Typography';
import Paper from '@mui/material/Paper';

import Navbar from '../components/Navbar'

import { POPULAR_AUTHORS } from '../utils/constants/popular_authors';



import { getAuthorData } from '../utils/api/authors.js';
import { getBooksList } from '../utils/api/authors.js';


import BooksTable from '../components/BooksTable';
import AuthorInfo from '../components/AuthorInfo';
import PopularAuthorList from '../components/PopularAuthorList';

export default function Home() {


  const [authorKey, setAuthorKey] = useState("OL23919A");
  const [authorInfo, setAuthorInfo] = useState([]);
  const [listBooks, setListBooks] = useState([])


  console.log(authorKey)

  useEffect(()=> {
    changeAuthor()
  },[authorKey])

  useEffect(()=> {
    getBooks()
  },[authorKey])

  
  const changeAuthor = () => {
    getAuthorData(authorKey).then((data)=> {
      setAuthorInfo({
          birthDate: data.birth_date,
          deathDate: data.death_date,
          Name: data.name,
        })
      })
  }

  const getBooks = () => {
    getBooksList(authorKey).then((data) => {
      let aBooksList = [];
      for (let i = 0; i < 100; i++) {
        aBooksList = [...aBooksList, data.entries[i].title];
      }
    setListBooks(aBooksList)
    })
  }


  function getMonthName(monthNumber) {
    const date = new Date();
    date.setMonth(monthNumber - 1);
  
    return date.toLocaleString('en-US', { month: 'long' });
  }

  if(authorInfo.deathDate === undefined )
  {
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0');
    var yyyy = today.getFullYear();
    
    today = dd + ' ' + getMonthName(mm) + ' ' + yyyy;
    authorInfo.deathDate = today;
    }
 



  return (
    <div>
      <Head>
        <title>Library App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main>

      

        <Container maxWidth="md">
          <Grid container spacing={4}>
            <Grid item xs={8}>
              <Box>

                
                {/* {authorInfo.map((author)=> {
                  return <AuthorInfo

                  name = {author.name}
                  birthdate ={author.birthdate}
                  deathdate = {author.deathdate}
                  />
                })} */}

                <Typography
                  component="h1"
                  variant="h4"
                  align="center"
                  color="text.primary"
                  gutterBottom
                >
                  {authorInfo.Name}
                </Typography>
                <Typography  align="center" color="text.primary" paragraph>
                  {authorInfo.birthDate} - {authorInfo.deathDate}
                </Typography>


                {/* <BooksTable book={listBooks}/> */}


                <TableContainer component={Paper}>
                    <Table>
                    <TableHead>
                        <TableRow>
                        <TableCell>Books in all Languages</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {listBooks.map((book, index) =>{
                          return <TableRow key={index}>
                            <TableCell>{book}</TableCell>
                                
                                
                            </TableRow>}
                            )}   
                    </TableBody>
                    </Table>
                </TableContainer>


              </Box>
            </Grid>

            {/* <PopularAuthorList/> */}

            <Grid item xs={4}>
              <Box sx={{width: '100%'}}>
                <Typography
                  component="h1"
                  variant="h4"
                  align="center"
                  color="text.primary"
                  gutterBottom
                >
                  Popular Authors
                </Typography>
                <List sx={{width: '100%'}}>
                  <Divider />
                  {POPULAR_AUTHORS.map((author, index)=> {
                    return <Fragment key={index}>
                      <ListItem
                        secondaryAction={
                          <Button
                          //onClick={(author => clickHandler(author))}
                          onClick={() => {setAuthorKey(author.key); changeAuthor();}}
                          >show</Button>
                        }
                      >
                        <ListItemText primary={author.name}></ListItemText>
                      </ListItem>
                      <Divider />
                    </Fragment>
                  })}
                </List>
              </Box>
            </Grid>
          </Grid>
          
        </Container>
      </main>
    </div>
  )
}